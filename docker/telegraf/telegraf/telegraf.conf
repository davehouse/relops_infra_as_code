[agent]
  interval = "$INTERVAL"
  round_interval = true
  metric_batch_size = 5000
  metric_buffer_limit = 20000
  collection_jitter = "0s"
  flush_interval = "120s"
  flush_jitter = "0s"
  precision = ""
  debug = true
  quiet = false
  #logfile = "/etc/telegraf/run.log"
  logfile = ""
  hostname = "$HOSTNAME"
  omit_hostname = false

#[[outputs.influxdb]]
#  urls = ["https://hilldale-b40313e5.influxcloud.net:8086"]
#  database = "relops"
#  skip_database_creation = true
#  username = "relops_wo"
#  password = "password"
#  retention_policy = ""
#  write_consistency = "any"
#  timeout = "5s"

[[outputs.influxdb]]
  urls = ["$INFLUXDB_URL"]
  database = "$INFLUXDB_DB"
  #skip_database_creation = true
  username = "$INFLUXDB_USER"
  password = "$INFLUXDB_PASSWORD"
  retention_policy = ""
  write_consistency = "any"
  timeout = "120s"

[[inputs.influxdb_listener]]
  ## Address and port to host HTTP listener on
  service_address = ":8086"

  ## maximum duration before timing out read of the request
  read_timeout = "300s"
  ## maximum duration before timing out write of the response
  write_timeout = "300s"

  ## Maximum allowed http request body size in bytes.
  ## 0 means to use the default of 536,870,912 bytes (500 mebibytes)
  max_body_size = 0

  ## Maximum line size allowed to be sent in bytes.
  ## 0 means to use the default of 65536 bytes (64 kibibytes)
  max_line_size = 0

  ## Optional username and password to accept for HTTP basic authentication.
  ## You probably want to make sure you have TLS configured above for this.
  basic_username = "$INFLUXDB_USER"
  basic_password = "$INFLUXDB_PASSWORD"

[[inputs.webhooks]]
   service_address = ":1619"
#
#   [inputs.webhooks.filestack]
#     path = "/filestack"
#
#   [inputs.webhooks.github]
#     path = "/github"
#     # secret = ""
#
#   [inputs.webhooks.mandrill]
#     path = "/mandrill"
#
#   [inputs.webhooks.rollbar]
#     path = "/rollbar"
#
   [inputs.webhooks.papertrail]
     path = "/papertrail"
#
#   [inputs.webhooks.particle]
#     path = "/particle"

[[inputs.http]]
  urls = [
    "https://treestatus.mozilla-releng.net/trees2"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "600s"
  data_format = "json"
  name_prefix = "treestatus_all_"
  tag_keys = ["status", "tree"]
  json_string_fields = ["status", "reason", "message_of_the_day"]
  json_query = "result"

[[inputs.exec]]
  commands = [
    "/etc/telegraf/treestatus.sh"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "600s"
  data_format = "json"
  name_prefix = "treestatus_stack_"
  json_string_fields = ["repo", "status", "who", "reason"]
  tag_keys = ["repo", "status", "who", "reason"]
  json_time_key = "timestamp"
  json_time_format = "unix"

[[inputs.exec]]
  commands = [
    "/etc/telegraf/check_vcs.sh"
  ]
  #interval = "60s"
  timeout = "240s"
  data_format = "json"
  name_prefix = "vcssync_"
  tag_keys = ["repo"]
  json_string_fields = ["name", "message", "sha"]
  #json_time_key = "date"
  #json_time_format = "unix"
  json_time_key = "date"
  #json_time_format = "2006-01-02T15:04:05Z"  # git date format
  json_time_format = "2006-01-02T15:04:05-07:00"  # hg date format

[[inputs.http]]
  urls = [
    "https://aws-provisioner.taskcluster.net/v1/list-worker-type-summaries"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "60s"
  data_format = "json"
  name_prefix = "aws-provisioner"
  tag_keys = ["workerType"]
  [inputs.http.tags]
    provisionerId = "aws-provisioner-v1"

[[inputs.exec]]
  commands = [
    "/etc/telegraf/queue2.sh releng-hardware"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "1200s"
  data_format = "json"
  name_prefix = "tc_queue2_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/queue2.sh aws-provisioner-v1"
  ]
  interval = "$LONG_INTERVAL"
  timeout = "30m" 
  data_format = "json"
  name_prefix = "tc_queue2_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/queue.sh bitbar gce proj-autophone proj-servo scriptworker-prov-v1 terraform-packet"
  ]
  interval = "$LONG_INTERVAL"
  timeout = "20m"
  data_format = "json"
  name_prefix = "tc_queue2_"

[[inputs.exec]]
  commands = [
    "/etc/telegraf/queue.sh releng-hardware"
  ]
  #interval = "120s"
  timeout = "600s"
  data_format = "json"
  name_prefix = "tc_queue_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/queue.sh bitbar gce proj-autophone proj-servo scriptworker-prov-v1 terraform-packet"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "1200s"
  data_format = "json"
  name_prefix = "tc_queue_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/queue.sh aws-provisioner-v1"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "1200s"
  data_format = "json"
  name_prefix = "tc_queue_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/tc-web.sh releng-hardware"
  ]
  #interval = "120s"
  timeout = "600s"
  data_format = "json"
  name_prefix = "tc_web_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/tc-web.sh aws-provisioner-v1"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "1800s"
  data_format = "json"
  name_prefix = "tc_web_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/tc-web.sh gce"
  ]
  interval = "$LONG_INTERVAL"
  timeout = "1800s"
  data_format = "json"
  name_prefix = "tc_web_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/tc-web.sh proj-autophone terraform-packet"
  ]
  interval = "$MEDIUM_INTERVAL"
  timeout = "1800s"
  data_format = "json"
  name_prefix = "tc_web_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/tc-web.sh bitbar proj-servo scriptworker-prov-v1"
  ]
  interval = "$LONG_INTERVAL"
  timeout = "1800s"
  data_format = "json"
  name_prefix = "tc_web_"
  tag_keys = ["provisionerId", "workerType"]

[[inputs.exec]]
  commands = [
    "/etc/telegraf/treestatus2.sh"
  ]
  interval = "$LONG_INTERVAL"
  timeout = "600s"
  data_format = "influx"

[[inputs.exec]]
  commands = [
    "/etc/telegraf/treestatus2.sh 1"
  ]
  timeout = "60s"
  data_format = "influx"
